//You are given  sticks, where the length of each stick is a positive integer. A cut operation is performed on the sticks such that all of them are reduced by the length of the smallest stick.

Suppose we have six sticks of the following lengths:
5 4 4 2 2 8

Then, in one cut operation we make a cut of length 2 from each of the six sticks. For the next cut operation four sticks are left (of non-zero length), whose lengths are the following: 
3 2 2 6

The above step is repeated until no sticks are left.

Given the length of  sticks, print the number of sticks that are left before each subsequent cut operations.

Note: For each cut operation, you have to recalcuate the length of smallest sticks (excluding zero-length sticks).

Input Format 
The first line contains a single integer . 
The next line contains  integers: a0, a1,...aN-1 separated by space, where ai represents the length of ith stick.

Output Format 
For each operation, print the number of sticks that are cut, on separate lines.

Constraints 
1 ≤ N ≤ 1000 
1 ≤ ai ≤ 1000//


import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
       
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner in = new Scanner(System.in);
        int number = in.nextInt();
        int values;
        ArrayList<Integer> array = new ArrayList<Integer>();
        for(int i = 0;i<number;i++){
             values = in.nextInt();
              array.add(values);
        }
        Collections.sort(array);
        while(array.size()>0){
            int smallest_num= array.get(0);
            for(int j = 0;j<array.size();j++){
                array.set(j, array.get(j) - smallest_num);
            }
            System.out.println(array.size());
            array.removeAll(Collections.singleton(0));
            
            
        }
        
        
    }
}
